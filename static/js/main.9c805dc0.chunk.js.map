{"version":3,"sources":["reportWebVitals.js","hooks/useGeoLocation.js","assets/api/index.js","components/WeatherCard.js","components/Layout.js","components/Main.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useGeoLocation","useState","loaded","coord","lat","lng","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","useEffect","navigator","geolocation","getCurrentPosition","apiUrl","apiKey","callApiByLocation","WeatherCard","city","weather","setWeather","undefined","callApiByCityName","fetch","res","json","result","main","className","temp","moment","d","Date","currentTime","getTime","getTimezoneOffset","timezone","getCurrentTime","format","name","description","Math","round","temp_max","temp_min","initCities","Layout","cities","SetCities","inputRef","useRef","to","type","placeholder","ref","onKeyPress","e","key","current","value","map","index","Main","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c805dc0.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useState, useEffect } from 'react'\r\n\r\nconst useGeoLocation = () => {\r\n  const [location, setLocation] = useState({\r\n    loaded: false,\r\n    coord: { lat: \"\", lng: \"\" }\r\n  });\r\n\r\n  const onSuccess = (location) => {\r\n    setLocation({\r\n      loaded: true,\r\n      coord: {\r\n        lat: location.coords.latitude,\r\n        lng: location.coords.longitude\r\n      }\r\n    })\r\n  };\r\n\r\n  const onError = error => {\r\n    setLocation({\r\n      loaded: true,\r\n      error\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!(\"geolocation\" in navigator)) {\r\n      onError(\"Enable location access on your device\");\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(onSuccess, onError);\r\n  }, [])\r\n\r\n  return location;\r\n}\r\n\r\nexport default useGeoLocation\r\n","const apiUrl = \"https://api.openweathermap.org/data/2.5/\";\r\nconst apiKey = \"11585f737530f8793851c01426496222\";\r\n\r\nconst callApiByLocation = (lat, lng) => {\r\n  return `${apiUrl}weather?lat=${lat}&lon=${lng}&units=metric&appid=${apiKey}`;\r\n}\r\n\r\nconst callApiByCityName = (city) => {\r\n  return `${apiUrl}weather?q=${city}&units=metric&appid=${apiKey}`;\r\n}\r\n\r\nexport { callApiByCityName, callApiByLocation }","import React, { useEffect, useState } from 'react';\r\nimport moment from 'moment';\r\nimport useGeoLocation from '../hooks/useGeoLocation'\r\nimport { callApiByCityName, callApiByLocation } from '../assets/api';\r\n\r\nconst WeatherCard = ({ city }) => {\r\n  const [weather, setWeather] = useState({});\r\n  const location = useGeoLocation();\r\n\r\n  useEffect(() => {\r\n    const { lat, lng } = location.coord;\r\n\r\n    if (lat !== \"\" && lng !== \"\") {\r\n      const apiUrl = city !== undefined ? callApiByCityName(city) : callApiByLocation(lat, lng);\r\n\r\n      fetch(`${apiUrl}`)\r\n        .then(res => res.json())\r\n        .then(result => {\r\n          setWeather(result);\r\n        });\r\n    }\r\n\r\n  }, [city, location]);\r\n\r\n  const getCurrentTime = () => {\r\n    const d = new Date()\r\n    const localTime = d.getTime()\r\n    const localOffset = d.getTimezoneOffset() * 60000\r\n    const utc = localTime + localOffset\r\n    const currentTime = utc + (1000 * weather.timezone)\r\n    return new Date(currentTime)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        weather.main !== undefined ? (\r\n          <div className={(weather.main.temp > 19) ? 'card' : 'card card card-cold'}>\r\n            <div className=\"card-content\">\r\n              <div>\r\n                <div className=\"card-name\">{city || 'My location'}</div>\r\n                <div className=\"card-time\">\r\n                  {\r\n                    city !== undefined ? moment(getCurrentTime()).format(\"HH:mm\") : weather.name\r\n                  }\r\n                </div>\r\n              </div>\r\n              <div className=\"card-status\">{weather.weather[0].description}</div>\r\n            </div>\r\n            <div className=\"card-info\">\r\n              <div className=\"card-temp\">{Math.round(weather.main.temp)}°</div>\r\n              <div className=\"card-temp-scope\">\r\n                <span>H: {Math.round(weather.main.temp_max)}°</span>\r\n                <span>L: {Math.round(weather.main.temp_min)}°</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : ('')\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\nconst initCities = [\"Hue\", \"London\", \"Boston\"];\r\n\r\nfunction Layout() {\r\n  const [cities, SetCities] = useState(initCities);\r\n  const inputRef = useRef();\r\n\r\n  const handleEnter = (e) => {\r\n    if (e.key === 'Enter') {\r\n      SetCities([inputRef.current.value, ...cities]);\r\n      inputRef.current.value = \"\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"app-layout\">\r\n      <Link to=\"/weather-app\">\r\n        <div className=\"more-location\">\r\n          <i className=\"fas fa-arrow-right\"></i>\r\n        </div>\r\n      </Link>\r\n      <h3 className=\"app-heading\">Weather</h3>\r\n      <div className=\"app-search\">\r\n        <i className=\"fas fa-search\"></i>\r\n        <input type=\"text\" placeholder=\"Search for a city\" ref={inputRef} onKeyPress={handleEnter} />\r\n      </div>\r\n      <div className=\"card-container\">\r\n        <WeatherCard />\r\n        {\r\n          cities.map((city, index) => (\r\n            <WeatherCard city={city} key={index} />\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useGeoLocation from \"../hooks/useGeoLocation\";\r\nimport { callApiByLocation } from '../assets/api'\r\n\r\nfunction Main() {\r\n  const [weather, setWeather] = useState({});\r\n  const location = useGeoLocation();\r\n\r\n  useEffect(() => {\r\n    const { lat, lng } = location.coord;\r\n\r\n\r\n    if (lat !== \"\" && lng !== \"\") {\r\n      const apiUrl = callApiByLocation(lat, lng);\r\n\r\n      fetch(`${apiUrl}`)\r\n        .then(res => res.json())\r\n        .then(result => {\r\n          setWeather(result);\r\n        });\r\n    }\r\n  }, [location]);\r\n\r\n  return (\r\n    <>\r\n      {\r\n        weather.main !== undefined ? (\r\n          <div className=\"app-container\">\r\n            <Link to=\"/layout\">\r\n              <div className=\"more-location\">\r\n                <i className=\"fas fa-arrow-right\"></i>\r\n              </div>\r\n            </Link>\r\n            <div className=\"location\">{weather.name}</div>\r\n            <div className=\"temp\">{Math.round(weather.main.temp)}°</div>\r\n            <div className=\"status\">{weather.weather[0].description}</div>\r\n            <div className=\"temp-scope\">\r\n              <span>H: {Math.round(weather.main.temp_max)}°</span>\r\n              <span>L: {Math.round(weather.main.temp_min)}°</span>\r\n            </div>\r\n          </div>\r\n        ) : ('')\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport Layout from \"./components/Layout\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/weather-app\" element={<Main />} />\n          <Route path=\"/layout\" element={<Layout />} />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}